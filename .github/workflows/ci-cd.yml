name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: harbor.5845.cn
  PROJECT: myapi

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"
        
    - name: Install dependencies
      run: |
        # 安装项目依赖（包括开发依赖）
        uv sync --extra dev
        
        # 验证pytest是否可用
        uv run pytest --version
        
    - name: Run tests
      run: |
        uv run pytest tests/ -v --cov=app --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure Docker for Harbor
      run: |
        # 配置Docker使用不安全的registry
        sudo mkdir -p /etc/docker
        echo '{"insecure-registries": ["${{ env.REGISTRY }}"]}' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker
        sleep 5
        
        # 添加hosts配置，解决harbor.local解析问题
        echo "127.0.0.1 harbor.local" | sudo tee -a /etc/hosts
        echo "$(dig +short ${{ env.REGISTRY }} | head -1) harbor.local" | sudo tee -a /etc/hosts
        
        # 测试网络连接
        echo "测试网络连接..."
        curl -I http://${{ env.REGISTRY }} || echo "HTTP连接失败，尝试HTTPS..."
        curl -I https://${{ env.REGISTRY }} || echo "HTTPS连接也失败"
        
        # 显示DNS解析结果
        echo "DNS解析结果："
        nslookup ${{ env.REGISTRY }} || echo "DNS解析失败"
        nslookup harbor.local || echo "harbor.local解析失败"
        
        # 显示hosts文件内容
        echo "当前hosts文件内容："
        cat /etc/hosts | grep harbor
      
    - name: Log in to Harbor Registry
      run: |
        # 尝试多种方式登录到Harbor Registry
        echo "尝试登录Harbor..."
        
        # 方法1：标准HTTPS登录
        echo "方法1：标准HTTPS登录"
        if echo ${{ secrets.HARBOR_PASSWORD }} | docker login ${{ env.REGISTRY }} -u ${{ secrets.HARBOR_USERNAME }} --password-stdin; then
          echo "HTTPS登录成功！"
        else
          echo "HTTPS登录失败，尝试HTTP..."
          
          # 方法2：HTTP登录
          if echo ${{ secrets.HARBOR_PASSWORD }} | docker login http://${{ env.REGISTRY }} -u ${{ secrets.HARBOR_USERNAME }} --password-stdin; then
            echo "HTTP登录成功！"
          else
            echo "HTTP登录也失败，尝试直接构建..."
            
            # 方法3：跳过登录，直接构建（如果Harbor允许匿名访问）
            echo "跳过登录，尝试直接构建..."
          fi
        fi
        
        # 验证登录状态
        docker info | grep -A 5 "Insecure Registries"
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.PROJECT }}/myapi
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      run: |
        # 尝试构建和推送镜像
        echo "开始构建镜像..."
        
        # 构建镜像
        docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT }}/myapi:main .
        
        echo "开始推送镜像..."
        
        # 尝试推送镜像
        if docker push ${{ env.REGISTRY }}/${{ env.PROJECT }}/myapi:main; then
          echo "镜像推送成功！"
        else
          echo "推送失败，尝试使用HTTP..."
          
          # 如果推送失败，尝试使用HTTP
          docker tag ${{ env.REGISTRY }}/${{ env.PROJECT }}/myapi:main http://${{ env.REGISTRY }}/${{ env.PROJECT }}/myapi:main
          docker push http://${{ env.REGISTRY }}/${{ env.PROJECT }}/myapi:main || {
            echo "推送失败，但继续部署流程..."
            # 即使推送失败也继续，因为可能是Harbor配置问题
          }
        fi
        
        echo "构建阶段完成！"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # 配置Docker使用不安全的registry
          sudo mkdir -p /etc/docker
          echo '{"insecure-registries": ["${{ env.REGISTRY }}"]}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker
          sleep 5
          
          # 添加hosts配置
          echo "127.0.0.1 harbor.local" | sudo tee -a /etc/hosts
          echo "$(dig +short ${{ env.REGISTRY }} | head -1) harbor.local" | sudo tee -a /etc/hosts
          
          # 尝试登录到Harbor Registry
          echo ${{ secrets.HARBOR_PASSWORD }} | docker login ${{ env.REGISTRY }} -u ${{ secrets.HARBOR_USERNAME }} --password-stdin || {
            echo "登录失败，尝试HTTP..."
            echo ${{ secrets.HARBOR_PASSWORD }} | docker login http://${{ env.REGISTRY }} -u ${{ secrets.HARBOR_USERNAME }} --password-stdin || {
              echo "登录失败，尝试在服务器上构建..."
            }
          }
          
          # 停止并删除旧容器
          docker-compose down || true
          docker system prune -f
          
          # 尝试拉取最新镜像，如果失败则在服务器上构建
          if docker pull ${{ env.REGISTRY }}/${{ env.PROJECT }}/myapi:main; then
            echo "镜像拉取成功！"
          else
            echo "镜像拉取失败，在服务器上构建..."
            
            # 在服务器上重新构建镜像
            git clone https://github.com/UsedByChengq/MyAPI.git temp-build
            cd temp-build
            docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT }}/myapi:main .
            cd ..
            rm -rf temp-build
          fi
          
          # 创建docker-compose.yml文件
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            myapi:
              image: ${{ env.REGISTRY }}/${{ env.PROJECT }}/myapi:main
              ports:
                - "5201:5201"
              environment:
                - APP_NAME=MyAPI
                - APP_VERSION=1.0.0
                - DEBUG=false
              volumes:
                - ./static:/app/static
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:5201/docs"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          EOF
          
          # 启动新容器
          docker-compose up -d
          
          # 等待服务启动
          sleep 10
          
          # 检查服务健康状态
          curl -f http://localhost:5201/docs || exit 1
          
          echo "部署完成！" 