name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.cn-shanghai.aliyuncs.com
  NAMESPACE: docker_for_chengq
  PROJECT: myapi
  DOCKER_BUILDKIT: 1

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    - name: Install dependencies
      run: |
        # 安装项目依赖（包括开发依赖）
        uv sync --extra dev
        
        # 验证pytest是否可用
        uv run pytest --version
        
    - name: Run tests
      run: |
        uv run pytest tests/ -v --cov=app --cov-report=xml --cov-report=term
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
        - name: Verify Docker
      run: |
        # 验证Docker是否正常工作
        docker --version
        docker info
        echo "Docker验证完成"
        
    - name: Log in to Alibaba Cloud Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.PROJECT }}:main
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.PROJECT }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # 登录到阿里云容器镜像服务
          echo "登录到阿里云容器镜像服务..."
          echo ${{ secrets.ALIYUN_PASSWORD }} | docker login ${{ env.REGISTRY }} -u ${{ secrets.ALIYUN_USERNAME }} --password-stdin
          
          # 停止并删除旧容器
          docker-compose down || true
          docker system prune -f
          
          # 拉取最新镜像
          echo "拉取最新镜像..."
          docker pull ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.PROJECT }}:main
          
          # 创建docker-compose.yml文件
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            myapi:
              image: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.PROJECT }}:main
              ports:
                - "5201:5201"
              environment:
                - APP_NAME=MyAPI
                - APP_VERSION=1.0.0
                - DEBUG=false
              volumes:
                - ./static:/app/static
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:5201/docs"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          EOF
          
          # 启动服务
          docker-compose up -d
          
          # 等待服务启动
          echo "等待服务启动..."
          sleep 10
          
          # 检查服务状态
          if docker-compose ps | grep -q "Up"; then
            echo "✅ MyAPI部署成功！"
            echo "🌐 服务地址: http://${{ secrets.SERVER_HOST }}:5201"
            echo "📚 API文档: http://${{ secrets.SERVER_HOST }}:5201/docs"
            echo "📦 镜像来源: 阿里云容器镜像服务"
          else
            echo "❌ 服务启动失败"
            docker-compose logs
            exit 1
          fi 